@using ExpenseTracker.Web.ViewModels.TransactionCategory
@using ExpenseTracker.Core.Entities.Common
@using ExpenseTracker.Core.Constants
@model ExpenseTracker.Web.ViewModels.TransactionCategory.TransactionCategoryViewModel

@{
    ViewData["Title"] = "Transaction Category";
    Layout = "_Layout";
}

@section PageTitle
{
    <div class="page-header d-print-none">
        <div class="row align-items-center">
            <div class="col">
                <!-- Page pre-title -->
                <div class="page-pretitle">
                    Edit
                </div>
                <h2 class="page-title">
                    @ViewData["Title"]
                </h2>
            </div>
            <!-- Page title actions -->
            <div class="col-auto ms-auto d-print-none">
                <div class="btn-list">
                    <a asp-action="Index" asp-controller="TransactionCategory" class="btn btn-default d-none d-sm-inline-block">
                        <svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
                            <path stroke="none" d="M0 0h24v24H0z" fill="none"/><line x1="18" y1="6" x2="6" y2="18"/><line x1="6" y1="6" x2="18" y2="18"/>
                        </svg>
                        Cancel
                    </a>
                    <a asp-action="Index" asp-controller="TransactionCategory" class="btn btn-default d-sm-none d-sm-inline-block btn-icon" aria-label="Create new Transaction Category">
                        <svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
                            <path stroke="none" d="M0 0h24v24H0z" fill="none"/><line x1="18" y1="6" x2="6" y2="18"/><line x1="6" y1="6" x2="18" y2="18"/>
                        </svg>
                    </a>
                </div>
            </div>
        </div>
    </div>
}



<div class="col-md-12">
    <div class="card">
        <div class="card-header">
            <h3 class="card-title">@ViewData["Title"]</h3>
        </div>
        <div class="card-body">
            <form method="post" asp-action="Edit" asp-controller="TransactionCategory">
                <input type="hidden" asp-for="TransactionCategoryId">
                <div class="form-group mb-3 row">
                    @Html.LabelFor(a => a.Name, new { @class = "form-label col-3 col-form-label" })
                    <div class="col">
                        <input type="text" asp-for="Name" class="form-control" placeholder="Enter Category Name" autofocus>
                    </div>
                </div>
                <div class="form-group mb-3 row">
                    @Html.LabelFor(a => a.Type, new { @class = "form-label col-3 col-form-label" })
                    <div class="col">
                        <select asp-for="Type" asp-items="TransactionCategoryViewModel.TypeSelectList" class="form-control" id="select-type"></select>
                    </div>
                </div>
                <div class="form-group mb-3 row">
                    @Html.LabelFor(a => a.Icon, new { @class = "form-label col-3 col-form-label" })
                    <div class="col">
                        <select asp-for="Icon" class="form-select form-control" placeholder="Select a date" id="select-icon" value="">
                            @foreach (var (Key, Value) in CategoryIcon.Icons)
                            {
                                <option value="@Key" data-custom-properties="@Value">@Key</option>
                            }
                        </select>
                    </div>
                </div>

                <div class="form-group mb-3 row">
                    @Html.LabelFor(a => a.Color, new { @class = "form-label col-3 col-form-label" })
                    <div class="col">
                        <div class="row g-2">
                            @foreach (var color in Model.ColorList)
                            {
                                <div class="col-auto">
                                    <label class="form-colorinput" title="@color.name">
                                        <input asp-for="Color" type="radio" value="@color.hexValue" class="form-colorinput-input" data-com.bitwarden.browser.user-edited="yes">
                                        <span class="form-colorinput-color bg-@color.name.ToLowerInvariant()"></span>
                                    </label>
                                </div>
                            }
                        </div>
                    </div>
                </div>
                <div class="form-footer">
                    <button type="submit" class="btn btn-primary">Save</button>
                </div>
            </form>
        </div>
    </div>
</div>


@section Scripts
{
    <script>
        // @@formatter:off
        document.addEventListener("DOMContentLoaded", function () {
        	var el;
        	window.Choices && (new Choices(el = document.getElementById('select-icon'), {
        		classNames: {
        			containerInner: el.className,
        			input: 'form-control',
        			inputCloned: 'form-control-sm',
        			listDropdown: 'dropdown-menu',
        			itemChoice: 'dropdown-item',
        			activeState: 'show',
        			selectedState: 'active',
        		},
        		shouldSort: false,
        		searchEnabled: false,
        		callbackOnCreateTemplates: function(template) {
        			var classNames = this.config.className,
        			itemSelectText = this.config.itemSelectText;
        			return {
        				item: function(classNames, data) {
        					return template('<div class="' + String(classNames.item) + ' ' + String( data.highlighted ? classNames.highlightedState : classNames.itemSelectable ) + '" data-item data-id="' + String(data.id) + '" data-value="' + String(data.value) + '"' + String(data.active ? 'aria-selected="true"' : '') + '' + String(data.disabled ? 'aria-disabled="true"' : '') + '><span class="dropdown-item-indicator"> <img class="avatar avatar-xs" src="data:image/svg+xml;utf8,' + data.customProperties + '"></span>' + String(data.label) + '</div>');
        				},
        				choice: function(classNames, data) {
        					console.log('data', data);
        					return template('<div class="' + String(classNames.item) + ' ' + String(classNames.itemChoice) + ' ' + String( data.disabled ? classNames.itemDisabled : classNames.itemSelectable ) + '" data-select-text="' + String(itemSelectText) + '" data-choice  ' + String( data.disabled ? 'data-choice-disabled aria-disabled="true"' : 'data-choice-selectable' ) + ' data-id="' + String(data.id) + '" data-value="' + String(data.value) + '" ' + String( data.groupId > 0 ? 'role="treeitem"' : 'role="option"' ) + ' ><span class="dropdown-item-indicator"><img class="avatar avatar-xs" src="data:image/svg+xml;utf8,' + data.customProperties + '"></span>' + String(data.label) + '</div>');
        				},
        			};
        		},
        	}));
        });
            document.addEventListener("DOMContentLoaded", function () {
            	var el;
            	window.Choices && (new Choices(el = document.getElementById('select-type'), {
            		classNames: {
            			containerInner: el.className,
            			input: 'form-control',
            			inputCloned: 'form-control-sm',
            			listDropdown: 'dropdown-menu',
            			itemChoice: 'dropdown-item',
            			activeState: 'show',
            			selectedState: 'active',
            		},
            		shouldSort: false,
            		searchEnabled: false,
            	}));
            });
            // @@formatter:on
      </script>
}