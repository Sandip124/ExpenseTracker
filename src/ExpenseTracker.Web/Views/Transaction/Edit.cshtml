@model ExpenseTracker.Web.ViewModels.TransactionViewModel

@{
    ViewData["Title"] = "Transaction ";
    Layout = "_Layout";
}

@section PageTitle
{
    <div class="page-header d-print-none">
        <div class="row align-items-center">
            <div class="col">
                <!-- Page pre-title -->
                <div class="page-pretitle">
                    Edit
                </div>
                <h2 class="page-title">
                    @ViewData["Title"]
                </h2>
            </div>
            <!-- Page title actions -->
            <div class="col-auto ms-auto d-print-none">
                <div class="btn-list">
                    <a asp-action="Delete" asp-controller="Transaction" asp-route-Id="@Model.Id" class="btn btn-danger">
                        <svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
                            <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
                            <line x1="4" y1="7" x2="20" y2="7"/>
                            <line x1="10" y1="11" x2="10" y2="17"/>
                            <line x1="14" y1="11" x2="14" y2="17"/>
                            <path d="M5 7l1 12a2 2 0 0 0 2 2h8a2 2 0 0 0 2 -2l1 -12"/>
                            <path d="M9 7v-3a1 1 0 0 1 1 -1h4a1 1 0 0 1 1 1v3"/>
                        </svg>
                        Delete
                    </a>
                    
                    <a asp-action="Index" asp-controller="Transaction" class="btn btn-default d-none d-sm-inline-block">
                        <svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
                            <path stroke="none" d="M0 0h24v24H0z" fill="none"/><line x1="18" y1="6" x2="6" y2="18"/><line x1="6" y1="6" x2="18" y2="18"/>
                        </svg>
                        Cancel
                    </a>
                    <a asp-action="Index" asp-controller="Transaction" class="btn btn-default d-sm-none d-sm-inline-block btn-icon" aria-label="Create new Transaction">
                        <svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
                            <path stroke="none" d="M0 0h24v24H0z" fill="none"/><line x1="18" y1="6" x2="6" y2="18"/><line x1="6" y1="6" x2="18" y2="18"/>
                        </svg>
                    </a>
                </div>
                
            </div>
        </div>
    </div>
}


<div class="col-md-12">
    <div class="card">
        <div class="card-header">
            <h3 class="card-title">@ViewData["Title"]</h3>
        </div>
        <div class="card-body">
            <form method="post" asp-action="Edit" asp-controller="Transaction">
                <input type="hidden" asp-for="Id">
                <div class="form-group mb-3 row">
                    @Html.LabelFor(a => a.TransactionEntryDate, new { @class = "form-label col-3 col-form-label" })
                    <div class="col">
                        <input asp-for="TransactionEntryDate" class="form-control" disabled="disabled" value="@DateTime.Now.ToString("yyyy-MM-ddThh:mm")" autofocus/>
                    </div>
                </div>

                <div class="form-group mb-3 row">
                    @Html.LabelFor(a => a.Type, new { @class = "form-label col-3 col-form-label" })
                    <div class="col">
                        <select asp-for="Type" asp-items="Model.TransactionTypes" disabled="disabled" class="form-control" id="transactionType"></select>
                    </div>
                </div>
                
                <div class="form-group mb-3 row">
                     @Html.LabelFor(a => a.TransactionCategory.CategoryName, new { @class = "form-label col-3 col-form-label" })
                    <div class="col">
                        <input asp-for="TransactionCategory.CategoryName" class="form-control" disabled="disabled"/>
                    </div>
                </div>

                <div class="form-group mb-3 row">
                    @Html.LabelFor(a => a.Amount, new { @class = "form-label col-3 col-form-label" })
                    <div class="col input-group">
                        <span class="input-group-text">
                            Rs.
                        </span>
                        @Html.TextBoxFor(a => a.Amount, new { @class = "form-control", placeholder = "Enter Amount" })
                    </div>
                </div>
                
                <div class="form-footer">
                    <button type="submit" class="btn btn-primary">Update</button>
                </div>
            </form>
        </div>
    </div>
</div>


@section Scripts
{
    <script>
        // @@formatter:off
        document.addEventListener("DOMContentLoaded", function () {
        	let el;
        	window.Choices && (new Choices(el = document.getElementById('select-icon'), {
        		classNames: {
        			containerInner: el.className,
        			input: 'form-control',
        			inputCloned: 'form-control-sm',
        			listDropdown: 'dropdown-menu',
        			itemChoice: 'dropdown-item',
        			activeState: 'show',
        			selectedState: 'active',
        		},
        		shouldSort: false,
        		searchEnabled: false,
        		callbackOnCreateTemplates: function(template) {
        			let classNames = this.config.className,
        			itemSelectText = this.config.itemSelectText;
        			return {
        				item: function(classNames, data) {
        					return template('<div class="' + String(classNames.item) + ' ' + String( data.highlighted ? classNames.highlightedState : classNames.itemSelectable ) + '" data-item data-id="' + String(data.id) + '" data-value="' + String(data.value) + '"' + String(data.active ? 'aria-selected="true"' : '') + '' + String(data.disabled ? 'aria-disabled="true"' : '') + '><span class="dropdown-item-indicator"> <img class="avatar avatar-xs" src="data:image/svg+xml;utf8,' + data.customProperties + '"></span>' + String(data.label) + '</div>');
        				},
        				choice: function(classNames, data) {
        					console.log('data', data);
        					return template('<div class="' + String(classNames.item) + ' ' + String(classNames.itemChoice) + ' ' + String( data.disabled ? classNames.itemDisabled : classNames.itemSelectable ) + '" data-select-text="' + String(itemSelectText) + '" data-choice  ' + String( data.disabled ? 'data-choice-disabled aria-disabled="true"' : 'data-choice-selectable' ) + ' data-id="' + String(data.id) + '" data-value="' + String(data.value) + '" ' + String( data.groupId > 0 ? 'role="treeitem"' : 'role="option"' ) + ' ><span class="dropdown-item-indicator"><img class="avatar avatar-xs" src="data:image/svg+xml;utf8,' + data.customProperties + '"></span>' + String(data.label) + '</div>');
        				},
        			};
        		},
        	}));
        });
            document.addEventListener("DOMContentLoaded", function () {
            	let el;
            	window.Choices && (new Choices(el = document.getElementById('select-type'), {
            		classNames: {
            			containerInner: el.className,
            			input: 'form-control',
            			inputCloned: 'form-control-sm',
            			listDropdown: 'dropdown-menu',
            			itemChoice: 'dropdown-item',
            			activeState: 'show',
            			selectedState: 'active',
            		},
            		shouldSort: false,
            		searchEnabled: false,
            	}));
            });
            // @@formatter:on
      </script>
}